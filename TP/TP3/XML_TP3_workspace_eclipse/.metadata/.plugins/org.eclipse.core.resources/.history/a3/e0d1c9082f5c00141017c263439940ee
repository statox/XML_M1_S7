package ex3;

/*
 * Created on 26 nov. 2003
 * 
 * To change the template for this generated file go to Window - Preferences -
 * Java - Code Generation - Code and Comments
 * 
 * Modified on 25 oct. 2014 - Adrien Fabre
 * Purpose: XML TP3 
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class parser {

	//Rem changer Package par ModelElement
	public void parse(String _fichier)
		throws SAXException, ParserConfigurationException, IOException {

		// Charger le document
		FileInputStream _xml_input_file = new FileInputStream(_fichier);

		parse(_xml_input_file);
	}

	public void parse(InputStream _xml_input_file)
		throws SAXException, ParserConfigurationException, IOException {
	
				
		//instancier le contrcuteur de parseurs
		DocumentBuilderFactory _factory = DocumentBuilderFactory.newInstance();

		//ignorer les commentaires dans les fichiers XML parsés
		_factory.setIgnoringComments(true);
		
		// créer un parseur
		DocumentBuilder _builder = _factory.newDocumentBuilder();

		// Charger le document
		Document doc = _builder.parse(_xml_input_file);

		
//		try {
//			printToConsole(toWriter(doc));
//			printtoFile(toWriter(doc));
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
		NodeList childrens = doc.getElementsByTagName("children");
		for (int i=0; i<childrens.getLength(); ++i){
			Node child = childrens.item(i);
			System.out.println(child.getNodeName() + " " + child.getTextContent());
		}
		
	}
	
	// recursive method to iterate through all the nodes of the Document
	public void readElement (Node node, String name){
		
		// output the element if it matches the requested one
		if (node.getNodeName().equals(name)){
			System.out.println(node.getNodeName() + " : " + node.getTextContent());
		}
	    

	    NodeList nodeList = node.getChildNodes();
	    for (int i = 0; i < nodeList.getLength(); i++) {
	        Node currentNode = nodeList.item(i);
	        if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
	            //calls this method for all the children which is Element
	            readElement(currentNode, name);
	        }
	    }
	}	
	
	// iterative method to iterate through all the nodes of the Document
	public void deleteElement (Document doc, String name){
		// getting the elements matching the requested one
		NodeList nodeList = doc.getElementsByTagName(name);
		
	    for (int i = 0; i < nodeList.getLength(); i++) {
	        Node node = nodeList.item(i);
	        
	        System.out.println(node.getNodeName() + "\t:\t" + node.getTextContent());
	        
	        // removing the node
	        node.getParentNode().removeChild(node);
	    }

        // Normalize the DOM tree, puts all text nodes in the
        // full depth of the sub-tree underneath this node
        doc.normalize();        
	}
	
	public void deleteNode (Document doc, Node node){
		node.getParentNode().removeChild(node);
		doc.normalize();
	}
	
	// utility to put the document in a writer to print it somewhere
	public static final Writer toWriter(Document xml) throws Exception {
        Transformer tf = TransformerFactory.newInstance().newTransformer();
        tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        tf.setOutputProperty(OutputKeys.INDENT, "yes");
        Writer out = new StringWriter();
        tf.transform(new DOMSource(xml), new StreamResult(out));
        
        return out;
        
    }
	
	// print the document on the screen
	public void printToConsole (Writer out){
		System.out.println(out.toString());
	}
	
	// print the document on a physical file
	// We use this function to integrate the internal DTD into the file
	public void printtoFile (Writer out){
		PrintWriter outFile;
		
		String XMLDeclaration = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n";
		String internalDTD = "<!DOCTYPE list [ "
				+ "\n\t<!ELEMENT list (man | woman)*>"
				+ "\n\t<!ELEMENT man (sons, daughters)>"
				+ "\n\t<!ATTLIST man name CDATA #REQUIRED>"
				+ "\n\t<!ELEMENT woman (sons, daughters)>"
				+ "\n\t<!ATTLIST woman name CDATA #REQUIRED>"
				+ "\n\t<!ELEMENT sons (man)*>"
				+ "\n\t<!ELEMENT daughters (woman)*>"
				+ "\n]>\n\n";
		
		String fileContent = out.toString().replace(XMLDeclaration, XMLDeclaration + internalDTD);
				
		try {
			outFile = new PrintWriter( new FileOutputStream("./result.xml") );
			
			outFile.println(fileContent);
	        
	        outFile.close();
	        outFile.flush();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}        
	}
}